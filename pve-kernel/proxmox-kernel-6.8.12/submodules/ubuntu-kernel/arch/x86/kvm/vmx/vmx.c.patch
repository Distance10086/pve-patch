diff --git a/arch/x86/kvm/vmx/vmx.c b/arch/x86/kvm/vmx/vmx.c
index 784f2ecca5d2..021ade42413f 100644
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -4469,10 +4469,9 @@ static u32 vmx_exec_control(struct vcpu_vmx *vmx)

 	/*
 	 * Not used by KVM, but fully supported for nesting, i.e. are allowed in
-	 * vmcs12 and propagated to vmcs02 when set in vmcs12.
+	 * vmcs12 and propagated to vmcs02 when set in vmcs12.//dds666  exec_control &= ~(CPU_BASED_RDTSC_EXITING |CPU_BASED_USE_IO_BITMAPS |
 	 */
-	exec_control &= ~(CPU_BASED_RDTSC_EXITING |
-			  CPU_BASED_USE_IO_BITMAPS |
+	exec_control &= ~(CPU_BASED_USE_IO_BITMAPS |
 			  CPU_BASED_MONITOR_TRAP_FLAG |
 			  CPU_BASED_PAUSE_EXITING);

@@ -6078,7 +6077,42 @@ static int handle_notify(struct kvm_vcpu *vcpu)

 	return 1;
 }
-
+/////////////////////////////////////////////////////////////////////////////////////// dds666
+////source from https://github.com/WCharacter/RDTSC-KVM-Handler
+static u32 print_once = 1;
+
+static int handle_rdtsc(struct kvm_vcpu *vcpu)
+{
+	static u64 rdtsc_fake = 0;
+	static u64 rdtsc_prev = 0;
+	u64 rdtsc_real = rdtsc();
+
+	if(print_once)
+	{
+		printk(KERN_ALERT "Intel KVM lixiaoliu and dds666 function is working!!\n");
+		print_once = 0;
+		rdtsc_fake = rdtsc_real;
+	}
+
+	if(rdtsc_prev != 0)
+	{
+		if(rdtsc_real > rdtsc_prev)
+		{
+			u64 diff = rdtsc_real - rdtsc_prev;
+			u64 fake_diff =  diff / 16; // if you have 4.2Ghz on your vm, change 16 to 20
+			rdtsc_fake += fake_diff;
+		}
+	}
+	if(rdtsc_fake > rdtsc_real)
+	{
+		rdtsc_fake = rdtsc_real;
+	}
+	rdtsc_prev = rdtsc_real;
+    vcpu->arch.regs[VCPU_REGS_RAX] = rdtsc_fake & -1u;
+    vcpu->arch.regs[VCPU_REGS_RDX] = (rdtsc_fake >> 32) & -1u;
+    return skip_emulated_instruction(vcpu);
+}
+///////////////////////////////////////////////////////////////////////////////////////
 /*
  * The exit handlers return 1 if the exit was handled fully and guest execution
  * may resume.  Otherwise they set the kvm_run parameter to indicate what needs
@@ -6137,6 +6171,7 @@ static int (*kvm_vmx_exit_handlers[])(struct kvm_vcpu *vcpu) = {
 	[EXIT_REASON_ENCLS]		      = handle_encls,
 	[EXIT_REASON_BUS_LOCK]                = handle_bus_lock_vmexit,
 	[EXIT_REASON_NOTIFY]		      = handle_notify,
+	[EXIT_REASON_RDTSC]		= handle_rdtsc, //dds666 added line
 };

 static const int kvm_vmx_max_exit_handlers =
@@ -8726,7 +8761,7 @@ module_exit(vmx_exit);
 static int __init vmx_init(void)
 {
 	int r, cpu;
-
+	printk(KERN_ALERT "Intel KVM lixiaoliu and dds666 v1.0 Start,ok!!!\n");//dds666
 	if (!kvm_is_vmx_supported())
 		return -EOPNOTSUPP;
